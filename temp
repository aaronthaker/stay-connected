import pandas as pd
import ast  # For safely evaluating the JSON-like strings

# Load the filtered sample dataframe
df_sample = pd.read_excel('filtered_sample.xlsx')

# Load the emails.xlsx file which contains the list of emails to check
df_emails = pd.read_excel('emails.xlsx', header=None)
email_list = df_emails[0].str.strip().str.lower().tolist()  # Convert to a list and normalize case

# Function to check if any participant's email matches the email list
def find_matching_email(row):
    try:
        # Convert the string in 'participants' to a list of dictionaries
        participants = ast.literal_eval(row['participants'])
        # Extract all the email addresses from the participants field
        for participant in participants:
            if 'EMAIL' in participant.get('contactType', ''):
                email = participant.get('contact', '').lower()
                if email in email_list:
                    return email  # Return the matching email
        return None
    except (ValueError, SyntaxError):
        return None  # Handle any errors in parsing the 'participants' field

# Apply the function across all rows of df_sample and create a new column with the matching email (if any)
df_sample['matching_email'] = df_sample.apply(find_matching_email, axis=1)

# Filter rows that contain a matching email
matching_rows = df_sample[df_sample['matching_email'].notna()]

# Check if any matching rows were found
if not matching_rows.empty:
    print(f"Emails from emails.xlsx found in {len(matching_rows)} rows of the sample file.")
    # Print out the matching rows and the matching emails
    print(matching_rows[['participants', 'matching_email']])
else:
    print("No matching emails found in the sample file.")