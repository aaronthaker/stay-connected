import pandas as pd
from rapidfuzz import process, fuzz
import re
import unicodedata

# Load the Excel file
file_path = "your_file.xlsx"  # Change this to your file path
df_current = pd.read_excel(file_path, sheet_name="CurrentGen")
df_next = pd.read_excel(file_path, sheet_name="NextGen")

# Utility to clean and normalize text
def clean_text(text):
    if pd.isnull(text):
        return ""
    text = str(text)
    text = unicodedata.normalize("NFKD", text)  # Normalize unicode
    text = re.sub(r'[^\x00-\x7F]+', '', text)  # Remove non-ASCII chars
    return text.strip()

# Function to extract the main sentence (after "):")
def extract_core_sentence(text):
    text = clean_text(text)
    match = re.search(r'\):\s*(.*)', text)
    return match.group(1).strip() if match else ""

# Clean and extract from CurrentGen
df_current['CoreJustification'] = df_current['Justification'].apply(extract_core_sentence)

# Clean and extract from NextGen
df_next['CoreJustification'] = df_next['Justification'].apply(extract_core_sentence)

# Prepare list of candidate sentences from NextGen
next_sentences = df_next['CoreJustification'].tolist()

# Go through each CurrentGen row and find the best match in NextGen
matches = []

for idx, row in df_current.iterrows():
    current_sentence = row['CoreJustification']
    
    # Try to find the best match
    best_match = process.extractOne(current_sentence, next_sentences, scorer=fuzz.partial_ratio)
    
    matches.append({
        'CurrentGen_Idx': idx,
        'CurrentGen_Justification': row['Justification'],
        'CurrentGen_Core': current_sentence,
        'BestMatch_Score': best_match[1] if best_match else None,
        'NextGen_Match': best_match[0] if best_match else None
    })

# Create a DataFrame with results
results_df = pd.DataFrame(matches)

# Display or save results
import ace_tools as tools; tools.display_dataframe_to_user(name="Matching Results", dataframe=results_df)