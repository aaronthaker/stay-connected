import pandas as pd
import numpy as np
import math

# --- CONFIGURATION ---
input_csv = 'your_file.csv'
output_excel = 'qa_sample_output.xlsx'
random_seed = 42

# Load data
df = pd.read_csv(input_csv)

# Clean-up if needed
df = df.dropna(subset=['Name', 'Current owner'])  # Remove rows missing key data

# Total number of alerts
total_alerts = len(df)

# Define function to determine sample size
def get_sample_size(n):
    if n <= 500:
        return 65
    elif n <= 1000:
        return 90
    elif n <= 2500:
        return 110
    elif n <= 5000:
        return 150
    elif n <= 10000:
        return 215
    elif n <= 15000:
        return 275
    else:
        return 275  # Can adjust if needed

# Get total sample size from mapping
total_sample_size = get_sample_size(total_alerts)

# Calculate number of alerts per scenario
scenario_counts = df['Name'].value_counts().to_dict()
scenario_sample_targets = {
    scenario: (count / total_alerts) * total_sample_size
    for scenario, count in scenario_counts.items()
}

# Create sampling plan per analyst per scenario
sampling_plan = []

for scenario, scenario_total in scenario_counts.items():
    scenario_sample_size = scenario_sample_targets[scenario]

    sub_df = df[df['Name'] == scenario]
    analyst_counts = sub_df['Current owner'].value_counts()

    for analyst, analyst_count in analyst_counts.items():
        prop_sample = (analyst_count / scenario_total) * scenario_sample_size
        if 0 < prop_sample < 1:
            sample_n = 1
        else:
            sample_n = int(round(prop_sample))

        sampling_plan.append({
            'Scenario': scenario,
            'Analyst': analyst,
            'Sample Size': sample_n
        })

# Convert to DataFrame
sampling_df = pd.DataFrame(sampling_plan)

# Merge with original data to pull sample
sampled_rows = []

for _, row in sampling_df.iterrows():
    scenario = row['Scenario']
    analyst = row['Analyst']
    sample_size = row['Sample Size']

    subset = df[(df['Name'] == scenario) & (df['Current owner'] == analyst)]

    if len(subset) == 0:
        continue

    sampled_subset = subset.sample(
        n=min(sample_size, len(subset)),
        random_state=random_seed
    )
    sampled_rows.append(sampled_subset)

# Combine all samples
final_sample = pd.concat(sampled_rows)

# Export to Excel
final_sample.to_excel(output_excel, index=False)
print(f"QA sample of size {len(final_sample)} saved to {output_excel}")