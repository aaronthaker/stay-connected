import pandas as pd
import glob
import os
import chardet
from datetime import datetime, timedelta

# Function to find the latest file matching a pattern
def find_latest_file(pattern):
    files = glob.glob(pattern)
    if not files:
        print(f'Error: No files found matching {pattern}')
        exit()
    return max(files, key=os.path.getctime)

# Function to extract date from the Report#28 filename
def extract_date_from_filename(filename):
    base = os.path.basename(filename)
    # Filename format: 'Report#28-15_11_2024_10_30_UTC.csv'
    try:
        # Remove 'Report#28-' prefix
        date_time_str = base.split('Report#28-')[1].split('_UTC')[0]
        # date_time_str is now '15_11_2024_10_30'
        
        # Split into date and time components
        date_part = '_'.join(date_time_str.split('_')[:3])  # '15_11_2024'
        # Convert underscores to hyphens for date parsing
        date_str = date_part.replace('_', '-')
        
        # Convert string to datetime object
        date = datetime.strptime(date_str, '%d-%m-%Y')
        return date
    except (IndexError, ValueError):
        print('Error: Unable to extract date from Report#28 filename.')
        exit()

# Find the latest 'Report#28' file
report_file = find_latest_file('Report#28*.csv')

# Extract the date from the filename
report_date = extract_date_from_filename(report_file)

# Calculate the previous week's date range
week_end_date = report_date - timedelta(days=1)  # Sunday of the previous week
week_start_date = week_end_date - timedelta(days=6)  # Monday of the previous week
date_range_str = f'{week_start_date.strftime("%d-%m-%Y")} to {week_end_date.strftime("%d-%m-%Y")}'

# Find the latest 'hr_data_HRIdentities' file
hr_file = find_latest_file('hr_data_HRIdentities*.csv')

# Detect encoding of the HR file
with open(hr_file, 'rb') as f:
    result = chardet.detect(f.read())
    hr_encoding = result['encoding']
    print(f'Detected encoding for HR file: {hr_encoding}')

# Read the HR identities data with detected encoding
hr_data = pd.read_csv(hr_file, encoding=hr_encoding)

# Ensure the required columns are present
required_columns_hr = ['DISPLAY_NAME', 'COUNTRY', 'MONITORED_STATUS']
if not all(col in hr_data.columns for col in required_columns_hr):
    print('Error: Required columns missing in hr_data_HRIdentities CSV.')
    exit()

# Select necessary columns
hr_data = hr_data[required_columns_hr]

# Read the Report#28 data
# Check if the first line is 'sep=,' and skip it if necessary
with open(report_file, 'r', encoding='utf-8-sig') as f:
    first_line = f.readline()
    if 'sep=,' in first_line:
        skiprows = [0]
    else:
        skiprows = []
    # Read the rest of the file content
    # rest_of_file = f.read()  # Not needed

# Read the Report#28 data
report_data = pd.read_csv(report_file, skiprows=skiprows)

# Ensure 'ME Name' column exists
if 'ME Name' not in report_data.columns:
    print('Error: "ME Name" column missing in Report#28 CSV.')
    exit()

# Merge the dataframes on 'ME Name' and 'DISPLAY_NAME'
merged_data = pd.merge(report_data, hr_data, left_on='ME Name', right_on='DISPLAY_NAME', how='left')

# Filter for 'in-scope' MEs
merged_data['MONITORED_STATUS'] = merged_data['MONITORED_STATUS'].astype(str).str.lower()
in_scope_data = merged_data[merged_data['MONITORED_STATUS'] == 'in-scope']

# Identify communication count columns starting from 'Generated Content'
comm_start_idx = report_data.columns.get_loc('Generated Content')
comm_columns = report_data.columns[comm_start_idx:]

# Group by 'COUNTRY' and sum the communication counts
grouped_data = in_scope_data.groupby('COUNTRY')[comm_columns].sum().reset_index()

# Add the date range to the dataframe
grouped_data['Date Range'] = date_range_str

# Reorder columns to have 'Date Range' first
cols = ['Date Range', 'COUNTRY'] + list(comm_columns)
grouped_data = grouped_data[cols]

# Output file name
output_file = 'communication_counts_by_territory.xlsx'

# Check if the output file already exists
if os.path.exists(output_file):
    # Read the existing data
    existing_data = pd.read_excel(output_file)
    # Append the new data to the existing data
    # Add a separator row (optional)
    separator = pd.DataFrame([[''] * len(grouped_data.columns)], columns=grouped_data.columns)
    combined_data = pd.concat([existing_data, separator, grouped_data], ignore_index=True)
else:
    combined_data = grouped_data

# Write the result to the Excel file
with pd.ExcelWriter(output_file, engine='openpyxl', mode='w') as writer:
    combined_data.to_excel(writer, index=False)

print(f'Communication counts for {date_range_str} have been appended to {output_file}')