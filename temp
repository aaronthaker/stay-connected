def calculate_stakes(exchange_sell_price, exchange_liquidity, bookmaker_back_price, commission_rate=0.02):
    """
    Calculate the optimal stakes to place on the exchange and the bookmaker.

    Parameters:
    exchange_sell_price (float): The price at which you can sell (lay) on the exchange.
    exchange_liquidity (float): The maximum amount available to sell at the exchange price.
    bookmaker_back_price (float): The price at which you can back on the bookmaker.
    commission_rate (float): The commission rate charged by the exchange on net winnings (default is 2%).

    Returns:
    dict: A dictionary containing the optimal stakes and expected profit.
    """
    # Calculate the optimal stake to place on the exchange
    exchange_stake = exchange_liquidity

    # Calculate the corresponding stake to place on the bookmaker
    bookmaker_stake = exchange_stake * (exchange_sell_price - 1) / (bookmaker_back_price - 1)

    # Calculate potential profit scenarios
    profit_if_win = bookmaker_stake * (bookmaker_back_price - 1) - exchange_stake * (exchange_sell_price - 1) * (1 + commission_rate)
    profit_if_lose = exchange_stake * (1 - commission_rate) - bookmaker_stake

    return {
        'exchange_stake': exchange_stake,
        'bookmaker_stake': bookmaker_stake,
        'profit_if_win': profit_if_win,
        'profit_if_lose': profit_if_lose
    }

def main():
    print("Welcome to the Betting Arbitrage Calculator!")
    try:
        exchange_sell_price = float(input("Enter the sell price on the exchange: "))
        exchange_liquidity = float(input("Enter the available liquidity at that price on the exchange: "))
        bookmaker_back_price = float(input("Enter the back price on the bookmaker: "))
    except ValueError:
        print("Invalid input. Please enter numeric values.")
        return

    # Ensure that the exchange sell price is lower than the bookmaker back price
    if exchange_sell_price >= bookmaker_back_price:
        print("No arbitrage opportunity: The exchange sell price must be lower than the bookmaker back price.")
        return

    # Calculate the optimal stakes and potential profits
    result = calculate_stakes(exchange_sell_price, exchange_liquidity, bookmaker_back_price)

    # Display the results to the user
    print("\nOptimal Betting Strategy:")
    print(f"1. Place a lay bet on the exchange with a stake of £{result['exchange_stake']:.2f} at odds of {exchange_sell_price}.")
    print(f"2. Place a back bet on the bookmaker with a stake of £{result['bookmaker_stake']:.2f} at odds of {bookmaker_back_price}.\n")
    print("Expected Profit:")
    print(f"- If the selection wins: £{result['profit_if_win']:.2f}")
    print(f"- If the selection loses: £{result['profit_if_lose']:.2f}")

if __name__ == "__main__":
    main()