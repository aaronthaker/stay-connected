import pandas as pd
from prompt_toolkit import prompt
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.shortcuts import checkboxlist_dialog, radiolist_dialog
from rich.console import Console
from rich.text import Text
from rich.panel import Panel

console = Console()

# Load Excel sheets
file_path = prompt("Enter Excel file path: ")
current_df = pd.read_excel(file_path, sheet_name='CurrentGen', usecols=['Alert ID', 'Justification']).fillna('')
next_df = pd.read_excel(file_path, sheet_name='NextGen', usecols=['Alert ID', 'Justification']).fillna('')

matches = []

console.print(Panel("[bold green]Interactive Alert Matching Started[/bold green]"))

for _, row in current_df.iterrows():
    alert_id = row['Alert ID']
    justification = row['Justification']

    # Format justification with colors (colon-based split)
    if ':' in justification:
        prefix, suffix = justification.split(':', 1)
        just_text = Text(prefix + ':', style="bold cyan") + Text(suffix, style="white")
    else:
        just_text = Text(justification, style="white")

    console.print(Panel(just_text, title=f"CurrentGen Alert ID: [bold yellow]{alert_id}[/bold yellow]", expand=False))

    words = [w.strip(',.') for w in justification.split() if len(w.strip(',.')) > 2]
    word_selector = checkboxlist_dialog(
        title="Select Search Keywords",
        text="Choose words for NextGen search:",
        values=[(word, word) for word in words]
    ).run()

    if not word_selector:
        continue  # Skip if no selection

    search_term = ' '.join(word_selector)
    results = next_df[next_df['Justification'].str.contains(search_term, case=False, regex=False)]

    if results.empty:
        console.print("[red]No matches found.[/red]")
        continue

    options = [(str(idx), f"{r['Alert ID']} - {r['Justification']}") for idx, r in results.iterrows()]
    selected = radiolist_dialog(
        title="Select Matching NextGen Alert",
        text="Choose the matching NextGen alert:",
        values=options
    ).run()

    if selected is not None:
        matched_row = results.loc[int(selected)]
        matches.append({
            'Alert ID CG': alert_id,
            'Justification CG': justification,
            'Alert ID NG': matched_row['Alert ID'],
            'Justification NG': matched_row['Justification']
        })
        console.print("[green]Match recorded.[/green]")

# Output matched results
if matches:
    output_df = pd.DataFrame(matches)
    output_df.to_excel("matched_results.xlsx", index=False)
    console.print(Panel("[bold green]Matches saved to matched_results.xlsx[/bold green]"))
else:
    console.print("[bold red]No matches recorded.[/bold red]")
