
def get_comms_by_date(session, start_date: str, end_date: str, comms_per_page: int = API_LIMIT) -> pd.DataFrame:
    if comms_per_page > API_LIMIT:
        raise ValueError("Comms per page must be less than " + str(API_LIMIT))
    
    base_url = f"https://glencore.behavox-saas.com/dashboard/api/3/communications/find?start-date={start_date}&end-date={end_date}&field=alertIds&limit={comms_per_page}"
    comms = []
    cursor = None  # Start with no cursor
    page = 0
    url = base_url  # Initial URL without cursor

    while True:
        headers = {"Authorization": "Bearer " + API_TOKEN}
        response = session.get(url, headers=headers, verify=SSL_CERT_PATH)

        if response.status_code != requests.codes.ok:
            print("Bad response:", response.content)
            response.raise_for_status()

        print(f'Good response at {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}')
        data = response.json()

        # Ensure communications data is available before accessing elements
        if 'communications' in data and data['communications']:
            comms += data['communications']
            print(f'First element ID: {data["communications"][0]["id"]}')
            print(f'Last element ID: {data["communications"][-1]["id"]}')
            print(f'Comms length: {len(comms)}')
        else:
            print(f"Page {page}: No communications found. Stopping pagination.")
            break  # No more data

        # Get cursor from response
        cursor = data.get('pagination', {}).get('cursor')

        if cursor:
            url = base_url + f"&cursor={cursor}"
            print(f"Page {page}: +{len(data['communications'])} communications.\n")
        else:
            print(f"Page {page}: +{len(data['communications'])} communications.\n\nNo more pages, {len(comms)} comms in total.\n")
            break  # No more pages

        print(f'Cursor is {cursor}')
        print("-" * 80)
        page += 1

    return pd.json_normalize(comms)