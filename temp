def calculate_arbitrage(exchange_sell_price, exchange_liquidity, bookmaker_back_price, commission_rate=0.02):
    """
    Calculate the optimal stake to place on the exchange and the bookmaker to lock in a profit.

    Parameters:
    exchange_sell_price (float): The odds at which you can lay (sell) on the exchange.
    exchange_liquidity (float): The maximum amount available to lay at the given odds on the exchange.
    bookmaker_back_price (float): The odds at which you can back on the bookmaker.
    commission_rate (float): The commission rate charged by the exchange on net winnings (default is 2%).

    Returns:
    dict: A dictionary containing the optimal stakes and the guaranteed profit.
    """

    # Calculate the implied probabilities
    implied_prob_exchange = 1 / exchange_sell_price
    implied_prob_bookmaker = 1 / bookmaker_back_price

    # Calculate the optimal back stake on the bookmaker
    optimal_back_stake = exchange_liquidity / (bookmaker_back_price - 1)

    # Ensure the back stake does not exceed the exchange liquidity
    if optimal_back_stake > exchange_liquidity:
        optimal_back_stake = exchange_liquidity

    # Calculate the corresponding lay stake on the exchange
    lay_stake = optimal_back_stake * (bookmaker_back_price - 1)

    # Calculate potential outcomes
    profit_if_win = (optimal_back_stake * bookmaker_back_price) - optimal_back_stake - (lay_stake * (exchange_sell_price - 1))
    profit_if_lose = lay_stake - optimal_back_stake

    # Adjust profits for exchange commission
    if profit_if_win > 0:
        profit_if_win -= profit_if_win * commission_rate
    else:
        profit_if_lose -= profit_if_lose * commission_rate

    # Calculate guaranteed profit
    guaranteed_profit = min(profit_if_win, profit_if_lose)

    return {
        'Optimal Back Stake (Bookmaker)': round(optimal_back_stake, 2),
        'Corresponding Lay Stake (Exchange)': round(lay_stake, 2),
        'Guaranteed Profit': round(guaranteed_profit, 2)
    }

def main():
    print("Arbitrage Betting Calculator")
    print("----------------------------")
    try:
        exchange_sell_price = float(input("Enter the sell (lay) price on the exchange: "))
        exchange_liquidity = float(input("Enter the available liquidity at that price on the exchange: "))
        bookmaker_back_price = float(input("Enter the back price on the bookmaker: "))
        commission_rate = float(input("Enter the exchange commission rate (as a decimal, e.g., 0.02 for 2%): "))

        result = calculate_arbitrage(exchange_sell_price, exchange_liquidity, bookmaker_back_price, commission_rate)

        print("\nOptimal Bet Placement:")
        print(f"Back £{result['Optimal Back Stake (Bookmaker)']} at odds of {bookmaker_back_price} with the bookmaker.")
        print(f"Lay £{result['Corresponding Lay Stake (Exchange)']} at odds of {exchange_sell_price} on the exchange.")
        print(f"Guaranteed Profit: £{result['Guaranteed Profit']}")
    except ValueError:
        print("Invalid input. Please enter numeric values for prices, liquidity, and commission rate.")

if __name__ == "__main__":
    main()