import re

def get_suggested_phrase(justification):
    justification = justification.strip()

    # Remove leading label if colon exists
    if ':' in justification:
        _, justification = justification.split(':', 1)
    words = justification.split()

    stopwords = set(['the', 'and', 'but', 'with', 'from', 'that', 'this', 'for', 'are', 'was', 'have', 'has'])

    # 1. Try phrases with only clean alphanumeric + select punctuation
    allowed_pattern = re.compile(r"^[\w',()\\-]+$")  # allows letters, numbers, comma, apostrophe, hyphen, brackets
    for i in range(len(words)):
        for length in range(5, 1, -1):  # try 5 down to 2 word phrases
            if i + length <= len(words):
                phrase_words = words[i:i + length]
                if all(allowed_pattern.match(w) for w in phrase_words):
                    phrase = ' '.join(phrase_words)
                    return phrase

    # 2. Fallback to original logic: any decent-looking phrase
    for i in range(len(words)):
        for length in range(5, 1, -1):
            if i + length <= len(words):
                phrase_words = words[i:i + length]
                if any(w.lower() not in stopwords for w in phrase_words):
                    phrase = ' '.join(phrase_words)
                    return phrase

    # 3. Final fallback
    return ' '.join(words[:5])