def calculate_arbitrage_bets(odds_list, total_stake):
    """
    Calculates the optimal bets for an arbitrage opportunity.
    
    :param odds_list: A list of decimal odds for all possible outcomes.
    :param total_stake: The total amount of money to bet across all outcomes.
    :return: A dictionary with the amounts to bet on each outcome and the guaranteed profit.
    """
    
    # Convert odds into implied probabilities
    implied_probs = [1 / odd for odd in odds_list]
    
    # Check if an arbitrage opportunity exists
    total_implied_prob = sum(implied_probs)
    
    if total_implied_prob >= 1:
        return {"error": "No arbitrage opportunity available."}
    
    # Calculate individual bets
    stakes = [total_stake * prob / total_implied_prob for prob in implied_probs]
    
    # Calculate guaranteed profit
    guaranteed_profit = (total_stake / total_implied_prob) - total_stake
    
    # Prepare results
    results = {
        "Total Stake": total_stake,
        "Bets": {f"Outcome {i+1}": round(stakes[i], 2) for i in range(len(odds_list))},
        "Guaranteed Profit": round(guaranteed_profit, 2)
    }
    
    return results


if __name__ == "__main__":
    # Get user input
    num_outcomes = int(input("Enter the number of possible outcomes: "))
    odds = []
    
    for i in range(num_outcomes):
        odd = float(input(f"Enter the decimal odds for outcome {i+1}: "))
        odds.append(odd)
    
    total_stake = float(input("Enter your total stake: "))

    # Calculate arbitrage bets
    result = calculate_arbitrage_bets(odds, total_stake)
    
    # Display results
    if "error" in result:
        print(result["error"])
    else:
        print("\nOptimal Betting Strategy:")
        for key, value in result["Bets"].items():
            print(f"{key}: ${value}")
        print(f"\nGuaranteed Profit: ${result['Guaranteed Profit']}")