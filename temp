Intermediete Python:

Matplotlib
- Used extensively for vizualisation in python
- matplotlib.pyplot as plt is used for plotting graphs
- plt.plot(x_axis, y_axis) generates a line graph connecting the points
- plt.show() to show the graph (cos you might wanna add extra stuff)
- plt.scatter(x, y) makes scatter graph - just plots the points without drawing a line basically
- WEIRD 3rd ARGUMENT TO SCATTER
- To make histogram use plt.hist(values, bins=3) and bins will automatically calculate upper/lower bounds for them (how to do this when you want weirdly shaped bins?)
- plt.clf() cleans up after plt.show apparently
- plt.xlabel('Year') or y to label x axis/y axis
- plt.title("title")
- plt.text(xcoord_number, ycoord_number, 'LabelText')
- plt.yticks([0,2,4,6,8,10]) - to choose values on the x/y axis - second optional argument for labelling them and that array should have same length ofc as the labels themselves e.g plt.yticks([0,2,4,6,8,10], ['0', '2B', '4B', '6B', '8B', '10B'])
- plt.grid(True) adds grid lines
DONE

Dictionarys
key-value pairs
world = {"AF":30.55, "UK":50, "US":512.12}
world["US"]
- world.keys() gives keys as class 'dict_keys'
- keys must be immutable objects
- to add stuff simply put world["SE"] = 0.0027
- "US" in world returns true if true
- delete with del(world["US"])
- with lists and dictionarys, you select update and remove with [], but for lists you index by range of numbers and for dictionary you index by unique keys
- if you want to easily select subsets of data or order matters of the elements, go with a list
- if you need a fast lookup table, dict is good
- can have dictionaries in dictionary and refer to them with europe["france"]["population"]
DONE

Pandas
- In Python, True > False
- With my_house = np.array([18.0, 20.0, 10.75, 9.50]) you can do
print(my_house >= 18) and it returns [True True False False] - can also use this to compare 2 numpy arrays with elementwise e.g my_house < your_house
- With Numpy arrays you cant just do print(bmi<5 or bmi>15) it throws an error, you gotta use logical_and(bool_expression and bool_expression) e.g logical_or(bmi<5, bmi>15), or, not. 
- For Numpy arrays (np.array) it MUST use logical_ not  just and/or
- NOTHING ELSE USEFUL UP TO 'Filtering pandas Dataframes'
- 
OLD NOTES
- Tabular datasets
- Numpy arrays not good at handling different data types
- Can create tables from dictionaries: keys are the columns and values are the data
- brics = pd.DataFrame(my_dict)
- automatically gives it an index/id, or you can add the index/id yourself with brics.index=["BR", "US" etc]
- or brics = pd.read_csv("path", index_col=0) - but the data's row labels will be seen as their own right, so you can use index_col to tell it which one is label
- 
DATAFRAMES Querying
Single column 		=> df['country'] or df.country
Multiple Columns	=> df[['country', 'population']]
Rows (by labels/index)	=> df.loc[row_label] (?)
	(range)		=> df.loc[start_label:end_label]
Rows (by indexes)	=> df.iloc[row_position]
	(range)		=> df.iloc[start_position:end_position]
Specific Value by label	=> df.loc[row_label, 'column_name']
Specific Value by pos	=> df.iloc[row_position, column_position]
Based on condition	=> instead of df['population'] > 5, do:
	- filter = df['population'] > 5
	- print(df[filter])
Based on 2 conditions	=> df[(filter1) & (filter2)]
