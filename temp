import pandas as pd
from pathlib import Path

FILE_PATH = Path(r"T:\99_Personal_Working_Folders\DS\QA\closed_alerts.csv")
DATE_COLS = ["Creation date", "Content date", "Closing date"]

def load_csv(path: Path) -> pd.DataFrame:
    """Load CSV with parsed dates and cleaned column names."""
    if not path.exists():
        raise FileNotFoundError(f"File not found: {path}")

    df = pd.read_csv(path, skiprows=[0], header=0)

    # Clean column names
    df.columns = df.columns.str.strip()

    # Strip whitespace and parse dates
    for col in DATE_COLS:
        df[col] = pd.to_datetime(
            df[col].str.strip(),
            format="%d/%m/%Y %H:%M:%S %Z",
            utc=True,
            errors="coerce"
        )

    return df

def filter_alerts(df: pd.DataFrame, start: str, end: str) -> pd.DataFrame:
    """
    Filter alerts closed between `start` and `end` (inclusive).

    Parameters:
    - df: DataFrame of alerts
    - start: Start date string (YYYY-MM-DD)
    - end: End date string (YYYY-MM-DD)

    Returns:
    - Filtered DataFrame
    """
    start_date = pd.to_datetime(start)
    end_date = pd.to_datetime(end)

    return df[
        (df["Closing date"] >= start_date) &
        (df["Closing date"] <= end_date)
    ]

def stratified_sampling(df: pd.DataFrame, strata: list[str], sample_size: int = 200) -> pd.DataFrame:
    """
    Perform stratified sampling on the DataFrame by given strata.
    Ensures at least one sample per group.
    """
    frac = sample_size / len(df)

    def sample_group(group):
        return group.sample(n=max(1, int(len(group) * frac)), random_state=42)

    return df.groupby(strata, group_keys=False).apply(sample_group)

def main():
    # Load alert data
    df = load_csv(FILE_PATH)

    # Define your date range for filtering
    start_date = "2025-05-25"
    end_date = "2025-05-27"

    # Filter by closing date
    df_filtered = filter_alerts(df, start_date, end_date)

    # Perform stratified sampling
    sample_size = 200
    strata = ["Name", "Current owner"]
    df_sample = stratified_sampling(df_filtered, strata, sample_size)

    # QA summary table (optional)
    df_summary = (
        df_sample.groupby(strata)["Alert ID"]
        .count()
        .reset_index(name="QA Alerts")
        .pivot(index="Name", columns="Current owner", values="QA Alerts")
    )

    print(df_summary)

if __name__ == "__main__":
    main()