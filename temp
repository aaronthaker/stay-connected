import pandas as pd
import numpy as np
import math

# ------------------ CONFIGURATION ------------------
input_csv = 'your_file.csv'  # <-- Replace with your actual CSV filename
output_excel = 'qa_sample_output.xlsx'
random_seed = 42
# ---------------------------------------------------

print("üìÇ Step 1: Loading CSV data...")
df = pd.read_csv(input_csv)

# Initial stats
print(f"‚úÖ Loaded {len(df)} rows from '{input_csv}'")

# Drop rows missing key information
print("üßπ Step 2: Cleaning data...")
initial_rows = len(df)
df = df.dropna(subset=['Name', 'Current owner'])  # Remove incomplete rows
removed_rows = initial_rows - len(df)
print(f"üßπ Removed {removed_rows} rows due to missing 'Name' or 'Current owner'")

# Total alerts
total_alerts = len(df)
print(f"üìä Step 3: Total number of valid closed alerts: {total_alerts}")

# Define function to determine sample size based on population
def get_sample_size(n):
    if n <= 500:
        return 65
    elif n <= 1000:
        return 90
    elif n <= 2500:
        return 110
    elif n <= 5000:
        return 150
    elif n <= 10000:
        return 215
    elif n <= 15000:
        return 275
    else:
        return 275

# Get recommended sample size
print("üìê Step 4: Determining recommended sample size...")
total_sample_size = get_sample_size(total_alerts)
print(f"üéØ Recommended total sample size (based on {total_alerts} alerts): {total_sample_size}")

# Step 5: Count alerts per scenario (Name)
print("üìÇ Step 5: Calculating alert counts per scenario...")
scenario_counts = df['Name'].value_counts().to_dict()

# Step 6: Determine sample size per scenario
print("üßÆ Step 6: Calculating sample size target per scenario...")
scenario_sample_targets = {}
for scenario, count in scenario_counts.items():
    target = (count / total_alerts) * total_sample_size
    scenario_sample_targets[scenario] = target
    print(f"  üìå Scenario '{scenario}': {count} alerts -> Target sample: {round(target, 2)}")

# Step 7: Create sampling plan per analyst per scenario
print("üìã Step 7: Calculating proportional sample per analyst in each scenario...")
sampling_plan = []

for scenario, scenario_total in scenario_counts.items():
    scenario_sample_size = scenario_sample_targets[scenario]
    sub_df = df[df['Name'] == scenario]
    analyst_counts = sub_df['Current owner'].value_counts()

    for analyst, analyst_count in analyst_counts.items():
        # Calculate proportional sample size for this analyst
        prop_sample = (analyst_count / scenario_total) * scenario_sample_size
        if 0 < prop_sample < 1:
            sample_n = 1
        else:
            sample_n = int(round(prop_sample))

        print(f"    üßë Analyst '{analyst}' in scenario '{scenario}': {analyst_count} alerts -> Sample: {sample_n}")

        sampling_plan.append({
            'Scenario': scenario,
            'Analyst': analyst,
            'Sample Size': sample_n
        })

# Convert plan to DataFrame
sampling_df = pd.DataFrame(sampling_plan)
print(f"‚úÖ Created sampling plan with {len(sampling_df)} analyst-scenario combinations.")

# Step 8: Sample alerts
print("üé≤ Step 8: Randomly sampling alerts per analyst-scenario...")
sampled_rows = []

for _, row in sampling_df.iterrows():
    scenario = row['Scenario']
    analyst = row['Analyst']
    sample_size = row['Sample Size']

    subset = df[(df['Name'] == scenario) & (df['Current owner'] == analyst)]

    if len(subset) == 0:
        print(f"‚ö†Ô∏è Skipping: No alerts for analyst '{analyst}' in scenario '{scenario}'")
        continue

    sample_n = min(sample_size, len(subset))
    sampled_subset = subset.sample(n=sample_n, random_state=random_seed)
    sampled_rows.append(sampled_subset)

    print(f"    üéØ Sampled {sample_n} alert(s) for analyst '{analyst}' in scenario '{scenario}'")

# Combine all sampled alerts
print("üì¶ Step 9: Compiling all sampled alerts into one dataset...")
final_sample = pd.concat(sampled_rows)
print(f"‚úÖ Final QA sample size: {len(final_sample)} alerts")

# Step 10: Export to Excel
print(f"üíæ Step 10: Saving QA sample to '{output_excel}'...")
final_sample.to_excel(output_excel, index=False)
print("‚úÖ Done! QA sample saved successfully.")

# Optional: Export sampling plan too
sampling_df.to_excel("qa_sampling_plan_summary.xlsx", index=False)
print("üìù Sampling plan summary saved to 'qa_sampling_plan_summary.xlsx'")